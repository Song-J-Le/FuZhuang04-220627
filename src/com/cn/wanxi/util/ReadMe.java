package com.cn.wanxi.util;

public class ReadMe {
    /**
     * 第四阶段：做一个完整的后台管理系统
     * servlet+JDBC
     * 目的：学会运用框架，或者模板（别人的，第三方的）
     * 能够快速拿着别人的模板进行简单的二次开发
     * ---------------------
     * 要么拿到它的代码
     * 要么拿到它的需求文档
     * ------------------------
     * 怎么通过Java来添加数据到数据库？
     * 需要掌握后台的几个层次？
     * model层：实体层：它和数据库表相对于:区别：命名规则不同
     * servlet层：页面控制层  和页面相关
     *  以后，传递参数如果有多个参数，最好封装到一个对象里面
     *  浏览器默认是get方法，而我们后台写的是post方法，如果要去测试
     *  有很多种方法
     *  1.测试类:用到第三方包，测试方法
     *  2.postman:测试接口
     *  后台和前端已经打通
     * service层：服务逻辑层 写服务逻辑的地方
     * dao层：数据持久层  这里就是和数据库打交道:所有的增删查改操作都在之类完成
     * 思考？每一个表都有CRUD,那么是不是有很多相同的代码？所以，会在这里封装一个增删改查的操作
     * JDBC:名字可以随便命名，这里用于连接数据库，执行数据库操作和关闭数据库操作
     * 不要在当前类里面写和当前类无关的代码，不是自己的代码不要写在自己的 类里面
     * 面试？手写一个JDBC？
     * 步骤？六大步骤
     * 以后你们的包是要什么，复制什么，不要把不相干的包放进来，有可能兼容问题，覆盖问题等问题
     * ----------------------------------------------------
     * 后台代码步骤：
     * 1.servlet
     * 2.service
     * 3.dao
     * 4.JDBC（已经写好，直接调用即可）
     */
    /**
     * 2022-8-3
     * 对于model层，和数据库的表相互对应，
     * 数据库里面的内容一般情况下都有增删查改的操作，
     * 如果要操作这些方法，就应该有一个前端页面相对于
     * 查询的时候，要么由一条，要么由很多条，要么什么都没有
     * 后台返回给前端的数据应该时能够看懂的，而不是对象的地址
     * 对数据进行强转
     * ------------------------------
     * 强制转换的数据格式应该和前端要的的格式一致
     * 一般情况下，以后前后端的数据都是通过json格式进行传递
     * 所以，需要将后台的数据转换为json格式
     *查询数来的数据由问号，问号就是乱码
     * -----------------------------
     * 对于前端，返回的数据类型太多，应该统一数据格式
     * 要做数据库操作，最好写一个统一的数据格式：ResultModel
     * 那么我们设置数据格式应该在服务逻辑层
     * 所以，每次都需要对结果进行创建对象
     *  ResultModel resultModel = new ResultModel();
     *         resultModel.setCount(count);
     *         resultModel.setMsg("");
     *         resultModel.setCode(0);
     *         然后对对象里面的属性进行赋值
     *         然后将对象返回给前端
     * --------------------------------------------------
     * 今日任务：
     * 将所有的表的增删查改的六个方法，全部代码写完
     * 明天课程安排：封装ResultModel，封装后台代码
     */
    /**
     * 2022-8-4
     * 1.servlet   六个步骤
     *          1）乱码
     *          2）得到前端的数据
     *          3）将数据进行封装到model
     *          4）调用服务逻辑层
     *          5）得到返回结果
     *          6）将结果返回给前端
     * 2.service   服务逻辑层  ：写逻辑代码的地方
     * 3.dao   数据持久层
     *          1)写sql语句
     *          2）调用JDBC
     *          3）查询的时候，需要将返回的结果进行解析
     *--------------------------------------------------
     * 为什么要返回统一格式？
     * 返回统一格式应该怎么写？根据前端需要？前后端进行交流
     * 因为我们用了前端框架模块：layui，layui的前端返回的格式
     * {
     *     code:0,
     *     msg:'',
     *     count:'',
     *     data:[]
     * }
     * ------------------------------------------
     * 服务逻辑层每一个返回值都是ResultModel
     * 每一个方法里面都有ResultModel的赋值
     * 如果代码里面超过两个代码一致的情况下，都会想到封装
     * 在服务逻辑层，将ResultModel单独写方法，为了少些代码
     * 对代码再次封装
     * private ResultModel getResultModel(int count, int code, String msg, Object data)
     * ------------------------------------
     * 一个类里面只能写自己的代码，不属于自己的代码就应该踢出去
     *
     *
     * 需要封装一个工具类，主要目的，
     * 就是为了前端传递到后台的值有问题，不至于数据库数据错误
     * 如果你们的密码直接存放于数据库，是不正确的，应该加密
     * ------------------------------------------------
     * 后台所有的代码，三层代码都应该会写
     * Java  通配符：泛型 BaseService<E>
     * ------------------------------------------------
     * 现在位置，后台代码正常的增删改查都已经讲完，
     * 任务：将所有的表的增删改查继续做完，然后进行封装
     */
    /**
     * 2022-8-5 文件上传
     * 文件上传：对于Java后台来说有两个事情
     * 1.必须要有jar包
     * 2.必须写Java代码
     * ----------------------------------------------------
     *
     */
    /**
     * 2022-8-9
     * 1.数据类型定义
     * 2.方法定义
     * 3.登录流程
     * 4.登录验证
     * 5.form表单监听
     */
    /**
     * 2022-8-11
     * if else尽量少用，甚至不要用else
     * 不要到处嵌套
     * 前端页面如果用的是框架，只要不是在一个框架里面，多个页面引入都可以用同样的id
     * 建议：用不同的id
     * 用户查询：
     * 1.创建member-list.html
     * 2.添加表格<table class="layui-hide" id="test" lay-filter="test"></table>
     * 3.添加操作按钮：<script type="text/html" id="barDemo">
     * 4.添加js文件member-list.js
     * 5.赋值表格渲染
     *      1）修改id
     *      2）修改访问后台的路径
     *      3）修改列：field 对应model层里面的属性名
     */
    /**
     * 2022-8-12
     * 对于生日：只需要年月日
     * 1.js里面进行日期格式化
     * 2.java里面进行日期格式化
     * 3.mysql日期格式化：（推荐）
     * 以后，mysql sql语句不允许出现* 查询所有,要什么给什么
     * ------------------------------------------------
     * 自定义模板
     * 编辑状态：sql语句的三种写法
     * 删除
     * 封装myAjax.js文件
     * ---------------
     * 无论后端还是前端，以后只要出现两次以上，就可能会进行封装
     * 日报：
     * attr和val和html的区别？
     * attr 改变div的属性值
     * $("#id").attr("class","aaa");
     * val得到input表单的值或者对input表单赋值
     *  $("#id").val(2);
     *  let name=$("#id").val();
     * html得到或者对div赋值
     *
     */
}
